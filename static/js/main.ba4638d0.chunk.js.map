{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","section","_templateObject","Heading","h1","_templateObject2","FormGroup","div","_templateObject3","Form","form","_templateObject4","Result","_templateObject5","App","state","currency","result","idr","selectedCurrency","handleChange","e","preventDefault","_e$target","target","name","value","_this","setState","Object","defineProperty","handleConvert","_callee","res","resJson","convert","regenerator_default","a","wrap","_context","prev","next","fetch","concat","sent","json","rates","toFixed","curreny","total","stop","this","keys","_i","_arr","length","i","push","_this$state","react_default","createElement","onSubmit","htmlFor","type","id","className","onChange","map","singleCurrency","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wvCAGA,IAAMA,EAAUC,IAAOC,QAAVC,KASPC,EAAUH,IAAOI,GAAVC,KAOPC,EAAYN,IAAOO,IAAVC,KAaTC,EAAOT,IAAOU,KAAVC,KAWJC,EAASZ,IAAOO,IAAVM,KAiGGC,6MAvFbC,MAAQ,CACNC,SAAU,GACVC,OAAQ,KACRC,IAAK,EACLC,iBAAkB,SAapBC,aAAe,SAAAC,GACbA,EAAEC,iBADgB,IAAAC,EAEMF,EAAEG,OAAlBC,EAFUF,EAEVE,KAAMC,EAFIH,EAEJG,MACdC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAiBJ,EAAOC,OAG1BK,oDAAgB,SAAAC,EAAMX,GAAN,IAAAY,EAAAC,EAAAC,EAAAlB,EAAA,OAAAmB,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACdpB,EAAEC,iBADYiB,EAAAE,KAAA,EAEIC,MAAK,2DAAAC,OAEnBhB,EAAKZ,MAAMI,mBAJD,cAERc,EAFQM,EAAAK,KAAAL,EAAAE,KAAA,EAOQR,EAAIY,OAPZ,OAORX,EAPQK,EAAAK,KAQRT,GACJR,EAAKZ,MAAMG,IAAMgB,EAAQY,MAAMnB,EAAKZ,MAAMI,mBAC1C4B,QAAQ,GAEJ9B,EAAS,CACb+B,QAASrB,EAAKZ,MAAMI,iBACpB8B,MAAOd,GAGTR,EAAKC,SAAS,CAAEX,WAjBF,yBAAAsB,EAAAW,SAAAlB,EAAAmB,0RAfIT,MAAM,wDAAlBT,kBACgBA,EAAIY,cAE1B,IAFMX,SACAlB,EAAW,KACDa,OAAOuB,KAAKlB,EAAQY,OAApCO,EAAA,EAAAA,EAAAC,EAAAC,OAAAF,IAAWG,EAAiCF,EAAAD,GAC1CrC,EAASyC,KAAKD,GAEhBL,KAAKvB,SAAS,CAAEZ,iJA6BT,IAAA0C,EAC6CP,KAAKpC,MAAjDC,EADD0C,EACC1C,SAAUC,EADXyC,EACWzC,OAAQE,EADnBuC,EACmBvC,iBAAkBD,EADrCwC,EACqCxC,IAC5C,OACEyC,EAAAtB,EAAAuB,cAAC7D,EAAD,KACE4D,EAAAtB,EAAAuB,cAACzD,EAAD,0DACAwD,EAAAtB,EAAAuB,cAACnD,EAAD,CAAMoD,SAAUV,KAAKpB,eACnB4B,EAAAtB,EAAAuB,cAACtD,EAAD,KACEqD,EAAAtB,EAAAuB,cAAA,SAAOE,QAAQ,OAAf,OACAH,EAAAtB,EAAAuB,cAAA,SACEG,KAAK,SACLC,GAAG,MACHC,UAAU,eACVxC,KAAK,MACLC,MAAOR,EACPgD,SAAUf,KAAK/B,gBAGnBuC,EAAAtB,EAAAuB,cAACtD,EAAD,KACEqD,EAAAtB,EAAAuB,cAAA,SAAOE,QAAQ,YAAf,YACAH,EAAAtB,EAAAuB,cAAA,UACElC,MAAOP,EACPM,KAAK,mBACLyC,SAAUf,KAAK/B,cACdJ,EAASmD,IAAI,SAAAC,GAAc,OAC1BT,EAAAtB,EAAAuB,cAAA,UAAQS,IAAKD,EAAgB1C,MAAO0C,GACjCA,OAKTT,EAAAtB,EAAAuB,cAACtD,EAAD,KACEqD,EAAAtB,EAAAuB,cAAA,uBAGH3C,EACC0C,EAAAtB,EAAAuB,cAAChD,EAAD,KACGK,EAAOgC,MADV,IACkBhC,EAAO+B,SAEvB,aAlFMsB,aCxCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAtB,EAAAuB,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ba4638d0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.section`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  height: auto;\n  min-height: 100vh;\n  width: 100%;\n`;\n\nconst Heading = styled.h1`\n  font-family: inherit;\n  color: #000;\n  font-size: 3rem;\n  margin-bottom: 2.5rem;\n`;\n\nconst FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  &:not(:last-child) {\n    margin-right: 2.5rem;\n  }\n\n  &:last-child {\n    align-self: flex-end;\n  }\n`;\n\nconst Form = styled.form`\n  display: flex;\n  width: 100%;\n  max-width: 45rem;\n  justify-content: space-between;\n\n  & > * {\n    flex: 0 0 calc(100% / 3);\n  }\n`;\n\nconst Result = styled.div`\n  font-family: inherit;\n  font-size: 2.5rem;\n  width: 100%;\n  max-width: 45rem;\n  text-align: center;\n  margin-top: 2.5rem;\n`;\n\nclass App extends Component {\n  state = {\n    currency: [],\n    result: null,\n    idr: 1,\n    selectedCurrency: 'BGN',\n  };\n\n  async componentDidMount() {\n    const res = await fetch('https://api.exchangeratesapi.io/latest');\n    const resJson = await res.json();\n    const currency = [];\n    for (const i of Object.keys(resJson.rates)) {\n      currency.push(i);\n    }\n    this.setState({ currency });\n  }\n\n  handleChange = e => {\n    e.preventDefault();\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleConvert = async e => {\n    e.preventDefault();\n    const res = await fetch(\n      `https://api.exchangeratesapi.io/latest?base=IDR&symbols=${\n        this.state.selectedCurrency\n      }`,\n    );\n    const resJson = await res.json();\n    const convert = (\n      this.state.idr * resJson.rates[this.state.selectedCurrency]\n    ).toFixed(4);\n\n    const result = {\n      curreny: this.state.selectedCurrency,\n      total: convert,\n    };\n\n    this.setState({ result });\n  };\n\n  render() {\n    const { currency, result, selectedCurrency, idr } = this.state;\n    return (\n      <Wrapper>\n        <Heading>Exchange rates IDR to foreign currency conversion</Heading>\n        <Form onSubmit={this.handleConvert}>\n          <FormGroup>\n            <label htmlFor='idr'>IDR</label>\n            <input\n              type='number'\n              id='idr'\n              className='form-control'\n              name='idr'\n              value={idr}\n              onChange={this.handleChange}\n            />\n          </FormGroup>\n          <FormGroup>\n            <label htmlFor='currency'>Currency</label>\n            <select\n              value={selectedCurrency}\n              name='selectedCurrency'\n              onChange={this.handleChange}>\n              {currency.map(singleCurrency => (\n                <option key={singleCurrency} value={singleCurrency}>\n                  {singleCurrency}\n                </option>\n              ))}\n            </select>\n          </FormGroup>\n          <FormGroup>\n            <button>Run</button>\n          </FormGroup>\n        </Form>\n        {result ? (\n          <Result>\n            {result.total} {result.curreny}\n          </Result>\n        ) : null}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}